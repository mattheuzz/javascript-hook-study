useState

function App() {
  const [reverse, setReverse] = useState(false)
  const [counter, setCounter] = useState(0)
  const reverseClass = reverse ? 'reverse' : ''

  const handleClick = () => {
    setReverse(!reverse)
    setCounter((counter)=> counter + 1)
  }
  
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className={`App-logo ${reverseClass}`} alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>

        <h2>Counter: {counter}</h2>

        <button type="button" onClick={handleClick}>Reverse</button>
      </header>
    </div>
  );
}

export default App;

/////////////////////////////////////////////////////////////////////////////////////////

useCallback
import P from 'prop-types'
import './App.css';
import React, { useCallback, useState } from 'react';

const Button = React.memo(({ handleClick }) =>{
  console.log('filho')
  return(
    <button onClick={() => handleClick(10)}>+</button>
  )
})

Button.propTypes={
  handleClick: P.func,
}


function App() {
  const [ counter, setCounter] = useState(0)

  const handleClick = useCallback((num) =>{
    setCounter((counter)=> counter + num)
  },[])
  
  console.log('pai')
  return (
    <div className="App">
      <h1>Olá Mundo</h1>
      <h3>C1: {counter}</h3>
      <Button handleClick={handleClick} />
    </div>
  );
}

export default App;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

useMemo
import { useEffect, useMemo, useState } from 'react';
import './App.css';


const Post = ({ post }) =>{
  console.log('filho')
  return (
    <div key={post.id}>
      <h2>{post.title}</h2>
      <p>{post.body}</p>
    </div>
  )
}

// Post.propTypes={
//   post: P.shape({
//     id: P.number,
//     title: P.string,
//     body: P.string
// })
// }

function App() {
  console.log('pai')

  const [posts, setPosts] = useState([])

  const [searchValue, setSearchValue] = useState('')


  useEffect(()=>{
    setTimeout(()=>{
      fetch("https://jsonplaceholder.typicode.com/posts")
      .then(r => r.json())
      .then(r => setPosts(r))
    }, 5000)
  },[])
  const handleChage = (e) =>{
    setSearchValue(e.target.value)
  }
  return(
    <div className="App">
      <div>
        <h1>Estamos em construção PACIÊNCIA</h1>
        <input type="search" value={searchValue} onChange={handleChage}></input>

        
        {useMemo(() => {
          return(
            posts.length > 0 &&
            posts.map((post) => {
            return(
              <Post key={post.id} post={post}/>
            )
        })
          )
        }, [posts])}

        {posts.length <= 0 &&(
          <p>Posts não renderizou ou está renderizando</p>
        )}
      </div>
    </div>
  )
}

export default App;
//////////////////////////////////////////////////////////////////////////////////////////////////////////

useRef
import { useEffect, useMemo, useRef, useState } from 'react';
import './App.css';


const Post = ({ post, onClick }) =>{
  console.log('filho')
  return (
    <div key={post.id}>
      <h2 onClick={onClick}>{post.title}</h2>
      <p>{post.body}</p>
    </div>
  )
}

// Post.propTypes={
//   post: P.shape({
//     id: P.number,
//     title: P.string,
//     body: P.string
// })
// }

function App() {
  console.log('pai')

  const [posts, setPosts] = useState([])
  const [searchValue, setSearchValue] = useState('')
  const input = useRef(null)
  const counter = useRef(0)

  useEffect(()=>{
    fetch("https://jsonplaceholder.typicode.com/posts")
    .then(r => r.json())
    .then(r => setPosts(r))
  },[])

  useEffect(() => {
    input.current.focus()
    console.log(input.current)
  }, [searchValue])

  useEffect(()=>{
    counter.current++
  })
  
  const handleChage = (e) =>{
    setSearchValue(e.target.value)
  }

  const handleTitle = (searchValue) =>{
    setSearchValue(searchValue)
  }


  return(
    <div className="App">
      <div>
        <h1>Estamos em construção PACIÊNCIA</h1>
        <p>Contador Render: {counter.current}</p>
        <input ref={input} type="search" value={searchValue} onChange={handleChage} />

        
        {useMemo(() => {
          return(
            posts.length > 0 &&
            posts.map((post) => {
            return(
              <Post key={post.id} post={post} onClick={()=>handleTitle(post.title)} />
            )
        })
          )
        }, [posts])}

        {posts.length <= 0 &&(
          <p>Posts não renderizou ou está renderizando</p>
        )}
      </div>
    </div>
  )
}

export default App;
//////////////////////////////////////////////////////////////////////////////////////////////////////////

useContext 
import React, { useContext, useState } from 'react';
import './App.css';

const globalState = {
  title:"O que é contexto?",
  body: 'O body do contexto',
  counter: 0
}

const GlobalContext = React.createContext()


const Div = ({ children }) =>{
  return(
    <div>
      <H1 />
      <P />
    </div>
  )
}

const H1 = () =>{
  const theContext = useContext(GlobalContext)
  const { contexState: { title, counter } } = theContext
  return(
    <>
      <h1>
        {title}
      </h1>
      <h1>  
        {counter}
      </h1>
    </>
  )
}



const P = () =>{
  const theContext = useContext(GlobalContext)
  const { contexState: { body, counter }, contexState, setContexState } = theContext 
  return(
    <p onClick={() => {setContexState({ ...contexState, counter: counter + 1 })}}>{body}</p>
  )
}

function App() {
  const [ contexState, setContexState ] = useState(globalState)

  return(
    <div className="App">
      <GlobalContext.Provider value={{ contexState, setContexState }}>  
        <Div />
      </GlobalContext.Provider>
    </div>
  )
}

export default App;

parte 2 useContext

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

